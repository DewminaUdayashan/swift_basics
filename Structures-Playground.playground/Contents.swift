import Foundation


/// On the structures, constructores are implicitly generated by the compiler.
/// So you don't have to create a one as do with the Classes
struct Person {
    let name: String
    let age: Int
}

let foo = Person(
    name: "Jhoo",
    age: 20
)

foo.age
foo.name


/// Defining custom constructors
struct ProgrammingLanguage{
    let name: String
    let rating: Double
    let level: String
    
    init(name: String, rating: Double){
        self.name = name
        self.rating = rating
        self.level = "High"
    }
}


let lang = ProgrammingLanguage(name: "Dart", rating: 9.8)


struct StructWithDefaultValueWithoutConstructor{
    let name: String
    let other: String = "This variable has a initial value so you don't want to create a constructor to assign a initial value"
}

let swdvwc = StructWithDefaultValueWithoutConstructor(name: "TEST")


struct Person2{
    let firstName: String
    let lastName: String
    var fullName: String {
        "\(firstName) \(lastName)"
    }
}

let p2 = Person2(firstName: "Json", lastName: "Placeholder")

p2.fullName

/// Structures are immutable in nature. One the instance is initiated, it canont be change and the
/// values inside that cannot be changed either.
/// if you want to make it mutable, you can use mutating function.

struct Car{
    var speed: Int
    mutating func drive(speed: Int){
        self.speed = speed;
        "Driving at \(speed)"
    }
}

let immutableCar = Car(speed: 10)
immutableCar.speed


var mutableCar = Car(speed: 10)
mutableCar.speed
mutableCar.drive(speed: 20)
mutableCar.speed


/// Structures are Value Types, which means if you assign a one reference to another,
/// you'll have a duplicate of the original value.
/// Structures cannot be inherited from each other.


struct Bike{
    let manufacturer : String
    let price : Double
    
    func copyWith(price: Double) -> Bike {
        Bike(manufacturer: self.manufacturer, price: price)
    }
}

let bike = Bike(manufacturer: "Suzuki", price: 416000)

bike.price

let bike2 = bike.copyWith(price: 550000)

bike2.price

